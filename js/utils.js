import fs from "fs";
import pkg from "lodash";

const { isEmpty, set, sortBy } = pkg;

import moment from "moment";
moment.locale("ru");

const isSameOrBetween = ({ target, prop, date, dateStart, dateEnd }) => {
  if (!dateStart || dateEnd === dateStart) {
    return moment(date).isSame(target, prop);
  }
  if (!dateEnd) {
    return moment(new Date(dateStart + "-" + target.year())).isSame(
      target,
      prop
    );
  }

  const start = moment(new Date(dateStart + "-" + target.year()));
  const end = moment(new Date(dateEnd + "-" + target.year()));
  return target.isSameOrBefore(end, prop) && target.isSameOrAfter(start, prop);
};

const isTodayEvent = ({ date, dateStart, dateEnd }) => {
  const today = moment();

  return isSameOrBetween({
    date,
    dateStart,
    dateEnd,
    target: today,
    prop: "day",
  });
};
const isThisWeekEvent = ({ date, dateStart, dateEnd }) => {
  const today = moment();

  // return moment(date).isSame(today, "week");
  return isSameOrBetween({
    date,
    dateStart,
    dateEnd,
    target: today,
    prop: "week",
  });
};
const isNextWeekEvent = ({ date, dateStart, dateEnd }) => {
  const nextWeek = moment().add(1, "week");

  // return moment(date).isSame(nextWeek, "week");
  return isSameOrBetween({
    date,
    dateStart,
    dateEnd,
    target: nextWeek,
    prop: "week",
  });
};
const isTomorrowEvent = ({ date, dateStart, dateEnd }) => {
  const tomorrow = moment().add(1, "d");

  // return moment(date).isSame(tomorrow, "day");
  return isSameOrBetween({
    date,
    dateStart,
    dateEnd,
    target: tomorrow,
    prop: "day",
  });
};

const readFile = (filePath) => {
  const file = JSON.parse(fs.readFileSync(filePath));

  return file;
};

const writeActualFile = (filePath, setPath, value) => {
  const currentFile = readFile(filePath);
  fs.writeFileSync(filePath, JSON.stringify(set(currentFile, setPath, value)));
};
const writeFile = (filePath, value) => {
  fs.writeFileSync(filePath, JSON.stringify(value));
};

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min; //–ú–∞–∫—Å–∏–º—É–º –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –º–∏–Ω–∏–º—É–º –≤–∫–ª—é—á–∞–µ—Ç—Å—è
}

function waitOneHour() {
  console.log("–ü–æ–¥–æ–∂–¥–µ–º 1 —á–∞—Å");
  const oneHourInMilliseconds = 60 * 60 * 1000;

  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
      console.log("—á–∞—Å –ø—Ä–æ—à–µ–ª");
    }, oneHourInMilliseconds);
  });
}
function waitOneMinute() {
  console.log("–ü–æ–¥–æ–∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É");
  const oneHourInMilliseconds = 60 * 1 * 1000;

  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
      console.log("–ú–∏–Ω—É—Ç–∞ –ø—Ä–æ—à–µ–ª");
    }, oneHourInMilliseconds);
  });
}
function wait(time = 3000) {
  //30s
  console.log("–ü–æ–¥–æ–∂–¥–µ–º " + time);

  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
      console.log(time + " –ø—Ä–æ—à–µ–ª");
    }, time);
  });
}

const filterEvents = (filterFn) => {
  const { events } = readFile("data/events.json");
  const sortedEvents = sortBy(events, "date");

  let filteredEvents = {};

  sortedEvents.forEach((event) => {
    if (
      filterFn({
        date: event.date,
        dateStart: event.dateStart,
        dateEnd: event.dateEnd,
      })
    ) {
      let formatDate = moment(event.date).format("D MMMM, dddd");
      const formatTime = moment(event.date).format("HH:mm");

      if (
        event.dateEnd &&
        event.dateStart &&
        event.dateEnd !== event.dateStart
      ) {
        formatDate = event.textDate;
      }

      set(filteredEvents, [formatDate, formatTime, event.linkHref], event);
    }
  });

  return filteredEvents;
};

const getEventsText = (eventsByDate, filterName) => {
  let text = `–°–æ–±—ã—Ç–∏–π –Ω–∞ ${filterName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`;
  if (!isEmpty(eventsByDate)) {
    let eventsLinks = "";

    Object.keys(eventsByDate).forEach((date) => {
      eventsLinks = eventsLinks + date + ": \n";
      Object.keys(eventsByDate[date]).forEach((time) => {
        Object.keys(eventsByDate[date][time]).forEach((href) => {
          const { message_id, name, timeEvent } =
            eventsByDate[date][time][href];

          eventsLinks =
            eventsLinks +
            "‚ñ™Ô∏è " +
            (timeEvent ? timeEvent + " - " : "") +
            '<a href="' +
            (message_id ? "https://t.me/events_chisinau/" + message_id : href) +
            '">' +
            name +
            "</a>" +
            "\n";
        });
      });
      eventsLinks = eventsLinks + "\n";
    });

    text = `üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –Ω–∞ ${filterName}\n\n` + eventsLinks;
  }

  return { isFound: !isEmpty(eventsByDate), text };
};

const monthNames = {
  —è–Ω–≤–∞—Ä—è: "01",
  —Ñ–µ–≤—Ä–∞–ª—è: "02",
  –º–∞—Ä—Ç–∞: "03",
  –∞–ø—Ä–µ–ª—è: "04",
  –º–∞—è: "05",
  –∏—é–Ω—è: "06",
  –∏—é–ª—è: "07",
  –∞–≤–≥—É—Å—Ç–∞: "08",
  —Å–µ–Ω—Ç—è–±—Ä—è: "09",
  –æ–∫—Ç—è–±—Ä—è: "10",
  –Ω–æ—è–±—Ä—è: "11",
  –¥–µ–∫–∞–±—Ä—è: "12",
  —è–Ω–≤–∞—Ä—å: "01",
  —Ñ–µ–≤—Ä–∞–ª—å: "02",
  –º–∞—Ä—Ç: "03",
  –∞–ø—Ä–µ–ª—å: "04",
  –º–∞–π: "05",
  –∏—é–Ω—å: "06",
  –∏—é–ª—å: "07",
  –∞–≤–≥—É—Å—Ç: "08",
  —Å–µ–Ω—Ç—è–±—Ä—å: "09",
  –æ–∫—Ç—è–±—Ä—å: "10",
  –Ω–æ—è–±—Ä—å: "11",
  –¥–µ–∫–∞–±—Ä—å: "12",
};

// Function to get the declension for the month
function getMonthDeclension(month) {
  const declensions = [
    "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä–µ–ª—è",
    "–º–∞—è",
    "–∏—é–Ω—è",
    "–∏—é–ª—è",
    "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫–∞–±—Ä—è",
  ];
  const numericMonthIndex = parseInt(month, 10) - 1;
  return declensions[numericMonthIndex];
}

function extractDateAndTimeAfisha(dateString) {
  const dateRegex = /(\d{1,2})(?:\s*|[a-z–∞-—è—ë]{1,}\s+)([–∞-—è—ë]+)/gi;
  const timeRegex = /\d{1,2}:\d{2}/;

  const dates = dateString.match(dateRegex);
  const times = dateString.match(timeRegex);

  if (dates) {
    const dateStart = dates[0];
    const dateEnd = dates[1] || dateStart; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º –µ—ë —Ä–∞–≤–Ω–æ–π –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
    const [h, m] = times ? times[0].split(":") : [null, null];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –¥–∞—Ç –∏ –º–µ—Å—è—Ü–µ–≤ –ø–µ—Ä–µ–¥ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const startMatches = dateStart.match(/(\d{1,2})|([–∞-—è—ë]+)/gi) || [];
    const endMatches = dateEnd.match(/(\d{1,2})|([–∞-—è—ë]+)/gi) || [];

    const [startDay, startMonth] = startMatches;
    const [endDay, endMonth] = endMatches;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ startMonth –∏ endMonth –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º toLowerCase()
    const normalizedDateStart = startMonth
      ? `${monthNames[startMonth.toLowerCase()]}-${startDay.padStart(
          2,
          "0"
        )}`.toLowerCase()
      : "";
    const normalizedDateEnd = endMonth
      ? `${monthNames[endMonth.toLowerCase()]}-${
          endDay ? endDay.padStart(2, "0") : ""
        }`.toLowerCase()
      : "";

    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    const textDate =
      endDay && startDay !== endDay
        ? `${startDay}-${endDay} ${endMonth.toLowerCase()}`
        : `${startDay} ${startMonth.toLowerCase()}`;

    return {
      dateStart: normalizedDateStart,
      dateEnd: normalizedDateEnd,
      hEvent: h || "",
      mEvent: m || "",
      timeEvent: h && m ? h + ":" + m : "",
      textDate,
    };
  }

  return null;
}

function extractDateAndTimeITickets(inputString) {
  const dateRegex = /(\d{1,2})(?:\s*‚Äì\s*(\d{1,2}))?\s+([a-z–∞-—è—ë]+)/gi;
  const timeRegex = /\d{1,2}:\d{2}/;

  const dateMatches = Array.from(inputString.matchAll(dateRegex));
  const timeMatch = inputString.match(timeRegex);

  let result = null;

  for (const dateMatch of dateMatches) {
    const dayStart = dateMatch[1];
    const dayEnd = dateMatch[2] || dayStart;
    const month = dateMatch[3];
    const h = timeMatch ? timeMatch[0].split(":")[0] : "";
    const m = timeMatch ? timeMatch[0].split(":")[1] : "";

    const numericMonth = monthNames[month.toLowerCase()];
    const dateStart = `${numericMonth}-${dayStart.padStart(2, "0")}`;
    const dateEnd = `${numericMonth}-${dayEnd.padStart(2, "0")}`;

    const textDate = `${dayStart}${
      dayStart !== dayEnd ? `-${dayEnd}` : ""
    } ${getMonthDeclension(numericMonth)}`;

    result = {
      dateStart,
      dateEnd,
      textDate,
      hEvent: h || "",
      mEvent: m || "",
      timeEvent: h && m ? h + ":" + m : "",
    };
  }

  return result;
}

function extractDateAndTimeLifetickets(inputString) {
  // Regular expression to extract date and time from the input string
  const regex = /\s*(\d{2})\.(\d{2})\.(\d{4}),\s*(\d{2}):(\d{2})\s*/;
  const match = inputString.match(regex);

  if (!match) {
    return null; // Return null if the input string doesn't match the expected format
  }

  const [, day, month, year, h, m] = match;
  const formattedDate = `${month}-${day}`;
  const textDate = `${day} ${getMonthDeclension(month)}`;

  return {
    dateStart: formattedDate,
    dateEnd: "",
    textDate,
    hEvent: h || "",
    mEvent: m || "",
    timeEvent: h && m ? h + ":" + m : "",
  };
}

function extractDateAndTimeTravel(inputString) {
  // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  const datePattern = /(\d{1,2})(-)?(\d{1,2})?([–∞-—è—ë]+)/i;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
  const match = inputString.match(datePattern);

  if (!match) {
    return null; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  }

  let dateStart = match[1].padStart(2, "0"); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –Ω–∞—á–∞–ª–∞ –¥–∞—Ç—ã (–¥–æ–±–∞–≤–ª—è–µ–º 0 –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ)
  let dateEnd = match[3] ? match[3].padStart(2, "0") : ""; // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –∫–æ–Ω—Ü–∞ –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
  const month = match[4]; // –ú–µ—Å—è—Ü

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—ä–µ–∫—Ç monthNames
  const monthNumber = monthNames[month.toLowerCase()];

  if (!monthNumber) {
    return null; // –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –¥–∞—Ç—É
  const textDate = `${dateStart}${dateEnd ? "-" + dateEnd : ""} ${month}`;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  const result = {
    dateStart: `${monthNumber}-${dateStart}`,
    dateEnd: dateEnd ? `${monthNumber}-${dateEnd}` : "",
    textDate: textDate,
  };

  return result;
}

const getSameName = (name, savedEvents) => {
  let sameName = null;

  for (let k = 0; k < Object.keys(savedEvents).length; k++) {
    const name1 = name.replaceAll(" ", "").toLowerCase();
    const name2 = savedEvents[Object.keys(savedEvents)[k]]?.name
      .replaceAll(" ", "")
      .toLowerCase();

    if (name1 === name2 || similarity(name1, name2) > 0.4) {
      sameName = savedEvents[Object.keys(savedEvents)[k]].message_id;
      break;
    }
  }

  return sameName;
};

function levenshteinDistance(a, b) {
  const m = a.length;
  const n = b.length;

  if (m === 0) return n;
  if (n === 0) return m;

  const dp = Array.from(Array(m + 1), () => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    dp[i][0] = i;
  }

  for (let j = 0; j <= n; j++) {
    dp[0][j] = j;
  }

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      const cost = a[i - 1] === b[j - 1] ? 0 : 1;
      dp[i][j] = Math.min(
        dp[i - 1][j] + 1, // deletion
        dp[i][j - 1] + 1, // insertion
        dp[i - 1][j - 1] + cost // substitution
      );
    }
  }

  return dp[m][n];
}

const similarity = (string1, string2) =>
  1 -
  levenshteinDistance(string1, string2) /
    Math.max(string1.length, string2.length);

export {
  getSameName,
  writeActualFile,
  readFile,
  writeFile,
  getRandomInt,
  waitOneHour,
  getEventsText,
  isTodayEvent,
  isThisWeekEvent,
  isNextWeekEvent,
  isTomorrowEvent,
  filterEvents,
  waitOneMinute,
  extractDateAndTimeAfisha,
  extractDateAndTimeITickets,
  extractDateAndTimeLifetickets,
  extractDateAndTimeTravel,
  wait,
  similarity,
};
