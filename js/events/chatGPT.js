import moment from "moment";
moment.locale("ru");

import config from "../../config.json" assert { type: "json" };
import { waitOneHour } from "../utils.js";
import { sendMarkup, sendMessage, sendPhoto } from "../tgApi.js";

import { ChatGPTUnofficialProxyAPI } from "chatgpt";
import { stopServer } from "../../bin/www.js";

const api = new ChatGPTUnofficialProxyAPI({
  accessToken: config.accessToken,
  apiReverseProxyUrl: "https://ai.fakeopen.com/api/conversation",
});

const sendCheckEvent = async (img, name, text, href, sameName) => {
  const fullText = name ? `<b>${name}</b>\n\n${text}` : text;
  const { message_id } = await sendMarkup(
    fullText,
    [
      [{ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url: href }],
      ...(sameName
        ? [
          [
            {
              text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π",
              url: "https://t.me/events_chisinau/" + sameName,
            },
          ],
        ]
        : []),
      [{ text: "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data: "rewrite" }],
      [{ text: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data: "edit" }],
      [{ text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data: "publish" }],
      [{ text: "–£–¥–∞–ª–∏—Ç—å", callback_data: "delete" }],
    ],
    config.telegram.my_chat_id
  );

  return { message_id, text: fullText };
};

const chatGPTRequest = async (
  {
    img,
    name,
    price,
    text,
    linkHref,
    date: filterDate,
    timeEvent,
    location,
    dateStart,
    dateEnd,
    textDate,
    category
  },
  sameName
) => {
  console.log("\n–ê–Ω–∞–ª–∏–∑ chatGPT");

  try {
    let res = { text };
    if (process.env.MODE !== "no-gpt" && process.env.MODE !== "local") {
      res = await api
        .sendMessage(`–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.\n` + (text || name))
        .then((res) => {
          console.log("\n–§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å—Ç");
          return api.sendMessage(
            `–°—Ñ–æ—Ä–º–∏—Ä—É–π –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞. –£–¥–∞–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ü–µ–Ω—ã, –≤—Ä–µ–º–µ–Ω–∏, –º–µ—Å—Ç–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —É–¥–∞–ª–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏.`,
            {
              parentMessageId: res.id,
              conversationId: res.conversationId,
            }
          );
        })
        .then((res) => {
          console.log("\n–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤—Ä–µ–º—è –º–µ—Å—Ç–æ");
          return api.sendMessage(
            `–í—ã–¥–µ–ª–∏ –∏–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è (date), –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (place), —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è (price), –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏—è (category) –∏ –≤–µ—Ä–Ω–∏ –≤ –≤–∏–¥–µ json {date: '', place:'', price: '', category: ''}. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–∞–≤—ã—á–∫–∏. –í–µ—Ä–Ω–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ï—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∏–∑ —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π - –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É "". –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ json,  –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`,
            {
              parentMessageId: res.id,
              conversationId: res.conversationId,
            }
          );
        })
        .then((res) => {
          console.log("\n–î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å—Ç–∞");
          const {
            date,
            place,
            category: categoryGPT,
            price: textPrice,
          } = JSON.parse(res?.text || {});
          console.log(category, categoryGPT)
          return api.sendMessage(
            `–∑–∞–±—É–¥—å –ø—Ä–æ json. –î–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å—Ç–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–µ—Ä–µ–≤–µ–¥–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫: ${(category && category !== "") || (categoryGPT && categoryGPT !== "") ? `\nüè∑Ô∏è ${category || categoryGPT}` : ""
            }${(!!price && price !== "") || (!!textPrice && textPrice != "")
              ? `\nüí∞ ${price || textPrice}`
              : ""
            }${!!textDate || date !== "" || !!filterDate
              ? `\nüóìÔ∏è ${textDate ||
              date ||
              moment(new Date(filterDate)).format("D MMMM, dddd")
              }`
              : ""
            }${timeEvent !== "" ? `\nüïí ${timeEvent}` : ""}${!!location || !!place ? `\nüìç ${location || place}` : ""
            } \n`,
            {
              parentMessageId: res.id,
              conversationId: res.conversationId,
            }
          );
        })
        .then(async (res) => {
          if (res.text.length > 800) {
            console.log("\n–û–±—Ä–µ–∑–∞–µ–º");
            const { text } = await api.sendMessage(
              `–ü–µ—Ä–µ–≤–µ–¥–∏ –∏—Ç–æ–≥–æ–≤—ã–π –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç json –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é post. –°–µ–π—á–∞—Å —Ç–∞–º ${res.text.length} —Å–∏–º–≤–æ–ª–æ–≤. –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –±–æ–ª—å—à–µ 800, —É–º–µ–Ω—å—à–∏ –∏—Ç–æ–≥–æ–≤—ã–π –ø–æ—Å—Ç, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 800 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ post.length –≤–∫–ª—é—á–∞—è  escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤), —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫. –ù–µ –º–µ–Ω—è–π —á–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —è —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å–∏–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–µ–Ω—ã –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ). –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ " –≤ —Ç–µ–∫—Å—Ç–µ. –ó–∞–º–µ–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π post –Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞. –í –æ—Ç–≤–µ—Ç —è —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ json —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å—Ç–∞.–ù–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–∏—Ö —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–π –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è, —è —Ö–æ—á—É –≤–∏–¥–µ—Ç—å –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ JSON. JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`,
              {
                parentMessageId: res.id,
                conversationId: res.conversationId,
              }
            );

            const jsonText = JSON.parse(text);

            return { ...res, text: jsonText?.post ? jsonText?.post : text };
          } else {
            return res;
          }
        })
        .then(async (res) => {
          if (res.text.length > 800) {
            console.log("\n–°–Ω–æ–≤–∞ –æ–±—Ä–µ–∑–∞–µ–º");
            const { text } = await api.sendMessage(
              `–î–ª–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ${res.text.length
              } —Å–∏–º–≤–æ–ª–æ–≤. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —É–±–µ—Ä–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –º–∏–Ω–∏–º—É–º ${res.text.length - 800
              } —Å–∏–º–≤–æ–ª–æ–≤. –ù–µ –º–µ–Ω—è–π —á–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —è –ø—Ä–æ—Å–∏–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–µ –ø–æ—Å—Ç–∞ (—Å —Ü–µ–Ω–æ–π, –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ). –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏. –ù–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–∏—Ö —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–π –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è, —è —Ö–æ—á—É –≤–∏–¥–µ—Ç—å –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ {post: ''}, –≥–¥–µ post - —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`,
              {
                parentMessageId: res.id,
                conversationId: res.conversationId,
              }
            );

            const jsonText = JSON.parse(text);

            return { text: jsonText?.post ? jsonText?.post : text };
          } else {
            return res;
          }
        });
    }
    console.log("\n–ø—É–±–ª–∏–∫–∞—Ü–∏—è", res?.text?.length);

    return sendCheckEvent(
      img,
      name,
      res.text.slice(0, 900),
      linkHref,
      sameName
    );
  } catch (e) {
    if (e.statusCode === 401) {
      await sendMessage(
        "–ò—Å—Ç–µ–∫ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ChatGPT",
        config.telegram.my_chat_id
      );
      stopServer();
      throw new Error(e.statusCode);
    }

    await waitOneHour();
    return chatGPTRequest(
      {
        img,
        name,
        price,
        text,
        linkHref,
        date: filterDate,
        timeEvent,
        location,
        dateStart,
        dateEnd,
        textDate,
      },
      sameName
    );
  }
};

const chatGPTTranslate = async (
  text
) => {
  console.log("\–ü–µ—Ä–µ–≤–æ–¥ chatGPT");

  try {
    let res = { text };
    if (process.env.MODE !== "no-gpt" && process.env.MODE !== "local") {
      res = await api
        .sendMessage(`–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –í –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n` + (text || name))
    }
    console.log("\n–ø—É–±–ª–∏–∫–∞—Ü–∏—è", res?.text?.length);


  } catch (e) {
    if (e.statusCode === 401) {
      await sendMessage(
        "–ò—Å—Ç–µ–∫ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ChatGPT",
        config.telegram.my_chat_id
      );
      throw new Error(e.statusCode);
    }

    await waitOneHour();
    return chatGPTRequest(
      {
        img,
        name,
        price,
        text,
        linkHref,
        date: filterDate,
        timeEvent,
        location,
        dateStart,
        dateEnd,
        textDate,
      },
      sameName
    );
  }
};
export { chatGPTRequest, sendCheckEvent };
